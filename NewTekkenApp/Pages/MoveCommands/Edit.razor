@page "/MoveCommands/Edit/{Id:int}"
@using System.Collections
@inherits BasePageComponent
<h3>@GetAppTitle()</h3>

@if (moveEntity == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <form method="post">
        <div class="mb-3 row">
            <label class="col-1 col-form-label">코드</label>
            <div class="col-auto">
                <input type="text" readonly class="form-control" @bind="@moveEntity.Code" />
            </div>
        </div>

        <div class="mb-3 row">
            <label class="col-1 col-form-label">캐릭터 코드</label>
            <div class="col-auto">
                <input type="text" readonly class="form-control" @bind="@moveEntity.Character_code" />
            </div>
        </div>


        <div class="mb-3 row">
            <label class="col-1 col-form-label">순번</label>
            <div class="col-auto">
                <input type="text" readonly class="form-control" @bind="@moveEntity.Number" />
            </div>
        </div>

        <div class="mb-3 row">
            <label class="col-1 col-form-label">설명</label>
            <div class="col-auto">
                <input type="text" readonly class="form-control" @bind="@moveEntity.Description" />
            </div>
        </div>

        <div class="mb-3 row">
            <label class="col-1 col-form-label">커맨드</label> <input class="col-1 col-form-label" @bind="@timer"></input>
            <div class="col-auto">
                <input id="Command" type="text" readonly class="form-control" placeholder="커맨드 입력" @bind="@moveEntity.MoveCommand.Description" @onkeydown="SetKeyDown" @onkeydown:preventDefault="true" @onkeydown:stopPropagation="true" @onkeyup="SetKeyUp" @onkeyup:preventDefault="true" @onkeyup:stopPropagation="true" />
            </div>
        </div>


        <div class="mb-3 row">
            <label class="col-1 col-form-label">커맨드</label>
            <div class="col-auto">
                <input id="displayCommand" type="text" readonly class="form-control" placeholder="커맨드 입력" @bind="@displayCommand" />
            </div>
        </div>



        @foreach (var item in @moveEntity.MoveCommand.NameSet)
        {
            <div class="row mb-1">
                <div class="col-1">
                    <label class="col-form-label col-form-label-sm">Id</label>
                </div>
                <div class="col-2">
                    <input class="form-control form-control-sm" value="@item.Id" readonly="readonly" />
                </div>
                <div class="col-1">
                    <label class="col-form-label col-form-label-sm">Code</label>
                </div>
                <div class="col-2">
                    <input value="@item.Language_code" class="form-control col-form-label-sm" readonly="readonly" />
                </div>

                <div class="col text-right">
                    <div class="form-check">
                        <input id="@String.Format("Change_{0}", @item.Language_code)" asp-for="@item.Checked" class="form-check-input" type="checkbox">
                        @*<input id="@String.Format("Change_{0}", @item.Language_Code)" asp-for="@Model[i].Change" class="form-check-input" type="checkbox">*@
                        <label class="form-check-label" for="Change">
                            Modified
                        </label>
                    </div>
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-1">
                    <label class="col-form-label col-form-label-sm">AsIs</label>
                </div>
                <div class="col-11">
                    <input type="text" class="form-control form-control-sm" value="@item.Name" placeholder="col-form-label-sm" readonly="readonly">
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-1">
                    <label class="col-form-label col-form-label-sm">ToBe</label>
                </div>
                <div class="col-11">
                    <input id="@String.Format("TlanslatedCommand_{0}", @item.Language_code)" language_Code="@item.Language_code" type="text" class="form-control form-control-sm commandName" placeholder="col-form-label-sm">
                </div>
            </div>

        }
    </form>
}

<StateGroupSelectBox OnStateGroupChanged="OnStateGroupChanged">
</StateGroupSelectBox>


<div class="row mb-3">
    <div class="col-sm-2">
        <label class="col-form-label col-form-label-sm">States</label>
    </div>

    <div class="row mb-3">
        <div class="col-sm">
            @if (state != null)
            {
                @foreach (var item in state)
                {
                    if (_stateGroupCode == 80000007)
                    {
                        <button type="button" class="mb-1 col btn btn-primary" value="@item.Description" @onclick="ShowMovesModal">@item.Description</button>
                    }
                    else if (_stateGroupCode == 80000015)
                    {
                        <button type="button" class="mb-1 col btn btn-primary" value="@item.Description" onClick="ShowTextModal(\'TEXT\',this.value);">@item.Description</button>
                    }
                    else
                    {
                        <button type="button" class="mb-1 col btn btn-primary" value="@item.Description" onClick="AddStateModal(this.value);">@item.Description</button>
                    }
                    <br />
                }
            }
        </div>
    </div>
</div>

<button class="btn btn-primary">Show Modal</button>

@code {

    [CascadingParameter] public IModalService Modal { get; set; }

    public async Task ShowMovesModal()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(moveEntity.Character_code), moveEntity.Character_code);

        var moveModal = Modal.Show<MoveListComponent>("State Move", parameters);
        var result = await moveModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            //await JSRuntime.InvokeVoidAsync("AddMovesModal", result.Data);

            if (module is not null) await module.InvokeAsync<object>("commandUtil.AddMovesModal", result.Data);
            Console.WriteLine("Modal was closed");
        }
    }

    async Task ShowTextModal()
    {

        //url = "/Admin/MoveText/SelectMoveText";

        //        var result = rawCommand + '/{T:' + stateCode + ':' + $('#move').val() + '}';

    }
    //    void ShowMovesModal() => Modal.Show<MoveListComponent>("State Move");

    private int timer { get; set; } = 0;
    public List<string> resultKey { get; set; }
    public List<string> clickedKey { get; set; }
    private Hashtable keyMap = new Hashtable();
    public string rawCommand { get; set; }
    public string displayCommand { get; set; }

    Boolean keyDown = false;

    public void InitCommand()
    {
        SetKeyMap();
        rawCommand = moveEntity.MoveCommand.Description;
        clickedKey = new List<string>();
        resultKey = new List<string>();

    }
    public void ClearCommand()
    {
        clickedKey.Clear();
        timer = 0;
    }



    public async Task SetKeyDown(KeyboardEventArgs e)
    {
        AddKey(e.Key);
        timer++;
        Console.WriteLine("SetKeyDown");
    }


    public async Task SetKeyUp(KeyboardEventArgs e)
    {
        RemoveKey(e.Key);
        if (resultKey.Count == 0)
        {
            AddCommand(e.Key);
        }
        timer = 0;
        Console.WriteLine("SetKeyUp");

    }


    public void AddKey(string key)
    {

        if (!clickedKey.Contains(key))
        {
            clickedKey.Add(key);
            resultKey.Add(key);
        }
    }


    public void AddCommand(string key)
    {
        string result = rawCommand;
        string formedKey = "";

        if (key == "Backspace")
        {
            int lastIndex = rawCommand.LastIndexOf("/");
            if (lastIndex < 0) lastIndex = 0;
            SetCommand(rawCommand.Substring(0, lastIndex));
            return;
        }
        else if (clickedKey.Count == 1)
        {
            formedKey = key.ToUpper();
        }
        else if (clickedKey.Count >= 2)
        {
            clickedKey.Sort();

            formedKey = String.Join("+", clickedKey.ToArray()).ToUpper();
        }
        
        if (timer > 2)
        {
            formedKey = 'L' + formedKey.ToUpper();
        }
        

        string mapppedKey = MapKey(formedKey);
       

        if (mapppedKey != "")
        {
            result += '/' + mapppedKey;
        }

        SetCommand(result);
        clickedKey.Clear();
    }



    public string MapKey(string formedKey)
    {
        if (keyMap[formedKey] != null)
        {
            return $"[{keyMap[formedKey].ToString().Trim()}]";
        }
        return "";
    }

    public void SetCommand(string result)
    {
        if (result.Length > 0 && result[0] == '/')
        {
            result = result.Substring(1, result.Length - 1);
        }

        rawCommand = result;
        moveEntity.MoveCommand.Description = rawCommand;
        displayCommand = rawCommand.Replace("/", " ");


        ClearCommand();
    }

    public void RemoveKey(string key)
    {
        bool isExist = this.resultKey.Contains(key);
        if (isExist)
        {
            resultKey.Remove(key);
        }
    }


    public async void SetKeyMap()
    {
        var results = await httpClient.GetFromJsonAsync<MoveListVM[]>("https://localhost:8164/api/commands");
        //keyMap = new HashSet();

        foreach (var result in results)
        {
            keyMap[result.Key] = result.Code;
        }
        //   result[data.key] = data.code;
    }
}

    @*<div class="mb-3 row">
    <label for="@moveEntity.MoveCommand.FirstOrDefault().Command" class="col-1 col-form-label">Command</label>
    <div class="col-auto">
    <input id="displayCommand" type="text" class="form-control form-control-sm"  @bind="@moveEntity.Command" readonly="readonly" />
    </div>
    </div>*@

    @*

    @{int i = 0; }
    @foreach (var item in @ViewBag.moveCommand)
    {

    i++;
    }



    <div class="row">
    <div class="col-sm-3">
    <button id="TransCommand" type="button" class="col btn btn-primary valid">변환</button>
    </div>
    <div class="col-sm-3">
    <input type="submit" value="@ViewBag.SaveButtonText" class="btn btn-primary" />
    <div class="col-sm-3">
    </div>
    <a asp-action="Index" class="btn btn-default" asp-route-character_code="@ViewBag.Character_Code">리스트</a>
    </div>
    @*<div class="col-sm">
    <a asp-action="Delete" class="btn btn-primary text-right" asp-route-id="@Model[0].Id" onclick="return confirm('정말 삭제하겠습니까?');">삭제</a>
    </div>*@

    @*    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <span class="text-danger">@ViewBag.ErrorMessage</span>
    </div>
    *@


    /*
    @*==================== 변환 커맨드 ====================*@
<!--<div class="row mb-3">
<div class="col-sm-2">
<label class="col-form-label col-form-label-sm">변환 커맨드 EN</label>
</div>
<div class="col-sm">
<input id="TlanslatedCommand_en" type="text" class="form-control form-control-sm" placeholder="커맨드 입력" readonly="readonly"></input>
</div>
</div>-->
    @*==================== 변환 커맨드 ====================*@
<!--<div class="row mb-3">
<div class="col-sm-2">
<label class="col-form-label col-form-label-sm">변환 커맨드 KO</label>
</div>
<div class="col-sm">
<input id="TlanslatedCommand_ko" type="text" class="form-control form-control-sm" placeholder="커맨드 입력" readonly="readonly"></input>
</div>
</div>-->
    @*==================== 변환 커맨드 ====================*@
<!--<div class="row mb-3">
<div class="col-sm-2">
<label class="col-form-label col-form-label-sm">변환 커맨드 JP</label>
</div>
<div class="col-sm">
<input id="TlanslatedCommand_jp" type="text" class="form-control form-control-sm" placeholder="커맨드 입력" readonly="readonly"></input>
</div>
</div>-->
    @*==================== 기술 상태 입력 ====================*@
    @*<div class="row mb-3">
    <div class="col-sm-2">
    <label class="col-form-label col-form-label-sm">States Group</label>
    </div>
    <div class="col-sm">
    <select id="StateGroup" asp-items="@ViewBag.SelectStateGroups"></select>
    </div>
    </div>

    <div class="row mb-3">
    <div class="col-sm-2">
    <label class="col-form-label col-form-label-sm">States</label>
    </div>
    <div class="col-sm">
    <div id="State">
    </div>
    </div>
    </div>*@





<!-- Modal placeholder -->
*/