@using System.Timers
@using NewTekkenApp.Pages.Common.Components.Filters

@inject IMoveFilters Filters
@implements IDisposable

<span class="text-white">Name</span>
<input type="text" autofocus @bind-value="FilterText" @bind-value:event="oninput" />
<button class="btn btn-danger" @onclick="@(()=>FilterText=string.Empty)">Clear</button>

@code {
    [CascadingParameter]
    public GridWrapper? Wrapper { get; set; }

    private string? filterText;

    /// <summary>
    /// Wait period in (ms) after the user stops typing.
    /// </summary>
    const int DebounceMs = 300;

    /// <summary>
    /// Timer for debounce.
    /// </summary>

    Timer? timer;
    /// <summary>
    /// Text to filter on.
    /// </summary>
    private string? FilterText
    {
        get => filterText;
        set
        {
            if (value != filterText)
            {
                filterText = value;
                // more text means restart the debounce timer
                timer?.Dispose();
                timer = new(DebounceMs);
                timer.Elapsed += NotifyTimerElapsed;
                timer.Enabled = true;
            }
        }
    }

    /// <summary>
    /// Fired after debounce time.
    /// </summary>
    /// <param name="sender">Timer.</param>
    /// <param name="e">Event args.</param>
    private async void NotifyTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        timer?.Dispose();
        timer = null;
        if (Filters.FilterText != filterText)
        {
            // notify the controls
            Filters.FilterText = filterText?.Trim();

            if (Wrapper is not null)
            {
                await InvokeAsync(() => Wrapper.FilterChanged.InvokeAsync(this));
            }
        }
    }

    /// <summary>
    /// Disposable pattern - override to dispose any ticking timers.
    /// </summary>
    /// <param name="disposing"><c>True</c> when disposing.</param>
    public void Dispose()
    {
        timer?.Dispose();
        timer = null;
    }

}
