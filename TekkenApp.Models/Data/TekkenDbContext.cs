// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using TekkenApp.Models;

#nullable disable

namespace TekkenApp.Data
{
    public partial class TekkenDbContext : DbContext
    {
        public TekkenDbContext() { }
        public TekkenDbContext(DbContextOptions<TekkenDbContext> options)
            : base(options)
        {
        }
        public virtual DbSet<BaseUtil> BaseUtil { get; set; }
        public virtual DbSet<BaseDataEntity> BaseEntities { get; set; }
        //public virtual DbSet<BaseTranslateName> BaseTranslateName { get; set; }
        public virtual DbSet<Move> Move { get; set; }
        public virtual DbSet<Move_Data_Name> Move_Data_Name { get; set; }
        public virtual DbSet<Move_command> Move_command { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<StateGroup> StateGroup { get; set; }
        public virtual DbSet<StateGroup_name> StateGroup_name { get; set; }
        public virtual DbSet<State_name> State_name { get; set; }
        public virtual DbSet<Character> character { get; set; }
        public virtual DbSet<Character_name> character_name { get; set; }
        public virtual DbSet<Command> command { get; set; }
        public virtual DbSet<Command_name> ctommand_name { get; set; }
        public virtual DbSet<HitType> hitType { get; set; }
        public virtual DbSet<HitType_name> hitType_name { get; set; }
        public virtual DbSet<Language> language { get; set; }
        public virtual DbSet<MoveSubType> moveSubType { get; set; }
        public virtual DbSet<MoveSubType_name> moveSubType_name { get; set; }
        public virtual DbSet<MoveText> moveText { get; set; }
        public virtual DbSet<MoveText_name> moveText_name { get; set; }
        public virtual DbSet<MoveType> moveType { get; set; }
        public virtual DbSet<MoveType_name> moveType_name { get; set; }
        public virtual DbSet<Move_command_name> move_command_name { get; set; }
        public virtual DbSet<Move_data> move_data { get; set; }
        public virtual DbSet<Move_name> move_name { get; set; }
        public virtual DbSet<TableCode> tableCode { get; set; }
        public virtual DbSet<TekkenVersion> tekkenVersion { get; set; }
        public DbSet<Dictionary<string, object>> Products => Set<Dictionary<string, object>>("Product");



        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog = Tekken; Integrated Security = True; Connect Timeout = 30; Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False", b => b.MigrationsAssembly("TekkenApp"));
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            //modelBuilder.SharedTypeEntity<Dictionary<string, object>>("moveType_name", b =>
            //{
            //    //b.IndexerProperty<int>("Id");
            //    b.IndexerProperty<string>("Name").IsRequired();
            //    b.IndexerProperty<decimal>("Price");
            //});

            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<BaseUtil>(entity =>
            {

            });


            //modelBuilder.Entity<BaseTranslateName>(entity =>
            //{

            //    entity.ToView("BaseTranslateName")
            //    .HasDiscriminator<int>("discriminator")
            //.HasValue<HitType_name>(1)
            //    //.HasNoKey()
            //    //
            //    //.HasKey(e => e.Id)

            //    //.HasValue<Appointment>(2);
            //    //.HasDiscriminator<int>("Type")
            //    ;
            //    //.HasDiscriminator<string>("discriminator")
            //    //.HasValue("e"); // "e" is the value of discriminator for Event type. 
            //});

            //modelBuilder.Entity<BaseTranslateName>().HasNoKey();
            //modelBuilder.SharedTypeEntity<Dictionary<string, object>>("BaseTranslateName", b =>
            //{
            //    b.IndexerProperty<int>("Id");
            //    b.IndexerProperty<string>("Base_code").IsRequired();
            //    b.IndexerProperty<string>("Language_code");
            //    b.IndexerProperty<string>("Name");
            //    b.IndexerProperty<bool>("Checked");
            //});
            modelBuilder.Entity<Move>(entity =>
        {
            entity.Property(e => e.description).IsUnicode(false);

            entity.HasOne(d => d.character_codeNavigation)
                .WithMany(p => p.Move)
                .HasPrincipalKey(p => p.code)
                .HasForeignKey(d => d.character_code)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Move_character");

            entity.HasOne(d => d.versionNavigation)
                .WithMany(p => p.Move)
                .HasForeignKey(d => d.version)
                .HasConstraintName("FK_Move_version");
        });

            modelBuilder.Entity<Move_Data_Name>(entity =>
            {
                entity.Property(e => e.language_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Move_Data_CodeNavigation)
                    .WithMany(p => p.Move_Data_Name)
                    .HasPrincipalKey(p => p.Move_Code)
                    .HasForeignKey(d => d.Move_Data_Code)
                    .HasConstraintName("FK_Move_Data_Name_move_data");
            });

            modelBuilder.Entity<Move_command>(entity =>
            {
                entity.Property(e => e.command).IsUnicode(false);

                entity.HasOne(d => d.move_codeNavigation)
                    .WithOne(p => p.Move_command)
                    .HasPrincipalKey<Move>(p => p.code)
                    .HasForeignKey<Move_command>(d => d.move_code)
                    .HasConstraintName("FK_Move_command_Move1");
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.Property(e => e.description).IsUnicode(false);

                entity.HasOne(d => d.StateGroup_codeNavigation)
                    .WithMany(p => p.State)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.StateGroup_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_State_StateGroup");
            });

            modelBuilder.Entity<StateGroup>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<StateGroup_name>(entity =>
            {
                entity.Property(e => e.Language_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.StateGroup_codeNavigation)
                    .WithMany(p => p.StateGroup_name)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.Base_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StateGroup_name_StateGroup");

                entity.HasOne(d => d.language_codeNavigation)
                    .WithMany(p => p.StateGroup_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.Language_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StateGroup_name_language");
            });

            modelBuilder.Entity<State_name>(entity =>
            {
                entity.Property(e => e.language_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.name).IsUnicode(false);

                entity.HasOne(d => d.language_codeNavigation)
                    .WithMany(p => p.State_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.language_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_State_name_language");

                entity.HasOne(d => d.state_codeNavigation)
                    .WithMany(p => p.State_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.state_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_State_name_State");
            });

            modelBuilder.Entity<Character>(entity =>
            {
                entity.Property(e => e.code_name)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.description).IsUnicode(false);
            });

            modelBuilder.Entity<Character_name>(entity =>
            {
                entity.Property(e => e.fullName).IsUnicode(false);

                entity.Property(e => e.language_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.language_codeNavigation)
                    .WithMany(p => p.character_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.language_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_character_name_language");
            });

            modelBuilder.Entity<Command>(entity =>
            {
                entity.Property(e => e.code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.command1).IsUnicode(false);

                entity.Property(e => e.key).IsUnicode(false);
            });

            modelBuilder.Entity<Command_name>(entity =>
            {
                entity.Property(e => e.command_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.language_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.name).IsUnicode(false);

                entity.HasOne(d => d.language_codeNavigation)
                    .WithMany(p => p.command_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.language_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_command_name_language");
            });

            modelBuilder.Entity<HitType>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<HitType_name>(entity =>
            {

                entity.Property(e => e.Language_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);


                entity.HasOne(d => d.hitType_codeNavigation)
                    .WithMany(p => p.hitType_name)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.Base_code)
                    .HasConstraintName("FK_hitType_name_hitType")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.Property(e => e.code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.name).IsUnicode(false);
            });

            modelBuilder.Entity<MoveSubType>(entity =>
            {
                entity.HasKey(e => e.id)
                    .HasName("PK_moveSubType_id")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.character_code, e.code }, "IX_moveSubType")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.description).IsUnicode(false);

                entity.HasOne(d => d.character_codeNavigation)
                    .WithMany(p => p.moveSubType)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.character_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveSubType_moveSubType");
            });

            modelBuilder.Entity<MoveSubType_name>(entity =>
            {
                entity.Property(e => e.language_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.name).IsUnicode(false);

                entity.HasOne(d => d.language_codeNavigation)
                    .WithMany(p => p.moveSubType_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.language_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveSubType_name_language");

                //entity.HasOne(d => d.moveSubType_codeNavigation)
                //.WithMany(p => p.moveSubType_name)
                //.HasPrincipalKey(p => p.code)
                //.HasForeignKey(d => d.moveSubType_code)
                //.OnDelete(DeleteBehavior.ClientSetNull)
                //.HasConstraintName("FK_moveSubType_name_moveSubType_name");
            });

            modelBuilder.Entity<MoveText>(entity =>
            {
                entity.Property(e => e.description).IsUnicode(false);

                entity.HasOne(d => d.character_codeNavigation)
                    .WithMany(p => p.moveText)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.character_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveText_character");
            });

            modelBuilder.Entity<MoveText_name>(entity =>
            {
                entity.Property(e => e.language_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.name).IsUnicode(false);

                entity.HasOne(d => d.language_codeNavigation)
                    .WithMany(p => p.moveText_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.language_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveText_name_language1");

                entity.HasOne(d => d.moveText_codeNavigation)
                    .WithMany(p => p.moveText_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.moveText_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveText_name_moveText");
            });

            modelBuilder.Entity<MoveType>(entity =>
            {
                entity.Property(e => e.description).IsUnicode(false);
            });

            modelBuilder.Entity<MoveType_name>(entity =>
            {
                entity.Property(e => e.language_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.name).IsUnicode(false);

                entity.HasOne(d => d.language_codeNavigation)
                    .WithMany(p => p.moveType_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.language_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveType_name_language");

                entity.HasOne(d => d.moveType_codeNavigation)
                    .WithMany(p => p.moveType_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.moveType_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveType_name_moveType");
            });

            modelBuilder.Entity<Move_command_name>(entity =>
            {
                entity.Property(e => e.language_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.name).IsUnicode(false);

                entity.HasOne(d => d.Move_Command_codeNavigation)
                    .WithMany(p => p.move_command_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.Move_Command_code)
                    .HasConstraintName("FK_move_command_Move");

                entity.HasOne(d => d.language_codeNavigation)
                    .WithMany(p => p.move_command_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.language_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_move_command_language");
            });

            modelBuilder.Entity<Move_data>(entity =>
            {
                entity.Property(e => e.afterBreak).IsUnicode(false);

                entity.Property(e => e.breakThrow).IsUnicode(false);

                entity.Property(e => e.counterFrame_Display).IsUnicode(false);

                entity.Property(e => e.guardFrame_Display).IsUnicode(false);

                entity.Property(e => e.hitFrame_Display).IsUnicode(false);

                entity.Property(e => e.hitLevel).IsUnicode(false);

                entity.Property(e => e.note).IsUnicode(false);

                entity.Property(e => e.startFrame_Display).IsUnicode(false);

                entity.HasOne(d => d.Move_CodeNavigation)
                    .WithOne(p => p.move_data)
                    .HasPrincipalKey<Move>(p => p.code)
                    .HasForeignKey<Move_data>(d => d.Move_Code)
                    .HasConstraintName("FK_move_data_Move");

                entity.HasOne(d => d.counterType_codeNavigation)
                    .WithMany(p => p.move_datacounterType_codeNavigation)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.counterType_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_move_data_hitType3");

                entity.HasOne(d => d.guardType_codeNavigation)
                    .WithMany(p => p.move_dataguardType_codeNavigation)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.guardType_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_move_data_hitType");

                entity.HasOne(d => d.hitType_codeNavigation)
                    .WithMany(p => p.move_datahitType_codeNavigation)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.hitType_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_move_data_hitType2");

                entity.HasOne(d => d.moveSubType_codeNavigation)
                    .WithMany(p => p.move_data)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.moveSubType_code)
                    .HasConstraintName("FK_move_data_moveSubType");

                entity.HasOne(d => d.moveType_codeNavigation)
                    .WithMany(p => p.move_data)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.moveType_code)
                    .HasConstraintName("FK_move_data_moveType");

                entity.HasOne(d => d.startType_codeNavigation)
                    .WithMany(p => p.move_datastartType_codeNavigation)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.startType_code)
                    .HasConstraintName("FK_move_data_hitType1");
            });

            modelBuilder.Entity<Move_name>(entity =>
            {
                entity.Property(e => e.language_code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.name).IsUnicode(false);

                entity.HasOne(d => d.language_codeNavigation)
                    .WithMany(p => p.move_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.language_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_move_name_language");

                entity.HasOne(d => d.move_codeNavigation)
                    .WithMany(p => p.move_name)
                    .HasPrincipalKey(p => p.code)
                    .HasForeignKey(d => d.move_code)
                    .HasConstraintName("FK_move_name_Move");
            });

            modelBuilder.Entity<TableCode>(entity =>
            {
                entity.Property(e => e.tableName).IsUnicode(false);
            });

            modelBuilder.Entity<TekkenVersion>(entity =>
            {
                entity.HasKey(e => e.version)
                    .HasName("PK_version");
            });

            OnModelCreatingPartial(modelBuilder);


        }


        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}