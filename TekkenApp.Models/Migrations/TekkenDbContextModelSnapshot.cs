// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TekkenApp.Data;

namespace TekkenApp.Models.Migrations
{
    [DbContext(typeof(TekkenDbContext))]
    partial class TekkenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Korean_100_CI_AS_SC_UTF8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TekkenApp.Models.Move", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("character_code")
                        .HasColumnType("tinyint");

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<short>("number")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("version")
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("id");

                    b.HasIndex("version");

                    b.HasIndex(new[] { "character_code", "number" }, "IX_Move")
                        .IsUnique();

                    b.HasIndex(new[] { "code" }, "IX_Move_1")
                        .IsUnique();

                    b.ToTable("Move");
                });

            modelBuilder.Entity("TekkenApp.Models.Move_Data_Name", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Guardtype_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Move_Data_Code")
                        .HasColumnType("int");

                    b.Property<string>("StartType_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("_checked")
                        .HasColumnType("bit")
                        .HasColumnName("checked");

                    b.Property<string>("counterType_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hitType_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<string>("moveSubType_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("moveType_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "Move_Data_Code", "language_code" }, "IX_Move_Data_Name")
                        .IsUnique();

                    b.ToTable("Move_Data_Name");
                });

            modelBuilder.Entity("TekkenApp.Models.Move_command", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("command")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("move_code")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex(new[] { "move_code" }, "IX_Move_command_1")
                        .IsUnique();

                    b.ToTable("Move_command");
                });

            modelBuilder.Entity("TekkenApp.Models.State", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StateGroup_code")
                        .HasColumnType("int");

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte>("number")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "code" }, "IX_State")
                        .IsUnique();

                    b.HasIndex(new[] { "StateGroup_code", "number" }, "IX_State_1")
                        .IsUnique();

                    b.ToTable("State");
                });

            modelBuilder.Entity("TekkenApp.Models.StateGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte>("number")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "code" }, "IX_StateGroup")
                        .IsUnique();

                    b.HasIndex(new[] { "number" }, "IX_StateGroup_1")
                        .IsUnique();

                    b.ToTable("StateGroup");
                });

            modelBuilder.Entity("TekkenApp.Models.StateGroup_name", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<int>("StateGroup_code")
                        .HasColumnType("int");

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("id");

                    b.HasIndex("language_code");

                    b.HasIndex(new[] { "StateGroup_code", "language_code" }, "IX_StateGroup_name")
                        .IsUnique();

                    b.ToTable("StateGroup_name");
                });

            modelBuilder.Entity("TekkenApp.Models.State_name", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("_checked")
                        .HasColumnType("bit")
                        .HasColumnName("checked");

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("state_code")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("language_code");

                    b.HasIndex(new[] { "state_code", "language_code" }, "IX_State_name")
                        .IsUnique();

                    b.ToTable("State_name");
                });

            modelBuilder.Entity("TekkenApp.Models.character", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("code")
                        .HasColumnType("tinyint");

                    b.Property<string>("code_name")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength(true);

                    b.Property<string>("description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte>("season")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "code" }, "IX_character")
                        .IsUnique();

                    b.HasIndex(new[] { "code_name" }, "IX_character_code_Unique")
                        .IsUnique();

                    b.ToTable("character");
                });

            modelBuilder.Entity("TekkenApp.Models.character_name", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("character_code")
                        .HasColumnType("int");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("language_code");

                    b.HasIndex(new[] { "character_code", "language_code" }, "IX_character_name")
                        .IsUnique();

                    b.ToTable("character_name");
                });

            modelBuilder.Entity("TekkenApp.Models.command", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength(true);

                    b.Property<string>("command1")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("command");

                    b.Property<string>("key")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "code" }, "IX_command")
                        .IsUnique();

                    b.ToTable("command");
                });

            modelBuilder.Entity("TekkenApp.Models.command_name", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("command_code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength(true);

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("id");

                    b.HasIndex("language_code");

                    b.HasIndex(new[] { "command_code", "language_code" }, "IX_command_name")
                        .IsUnique();

                    b.ToTable("command_name");
                });

            modelBuilder.Entity("TekkenApp.Models.hitType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte>("number")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "code" }, "IX_hitType")
                        .IsUnique();

                    b.HasIndex(new[] { "number" }, "IX_hitType_1")
                        .IsUnique();

                    b.ToTable("hitType");
                });

            modelBuilder.Entity("TekkenApp.Models.hitType_name", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("_checked")
                        .HasColumnType("bit")
                        .HasColumnName("checked");

                    b.Property<int>("hitType_code")
                        .HasColumnType("int");

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("id");

                    b.HasIndex("hitType_code");

                    b.ToTable("hitType_name");
                });

            modelBuilder.Entity("TekkenApp.Models.language", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte>("number")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "code" }, "IX_language")
                        .IsUnique();

                    b.ToTable("language");
                });

            modelBuilder.Entity("TekkenApp.Models.moveSubType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("character_code")
                        .HasColumnType("tinyint");

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte>("number")
                        .HasColumnType("tinyint");

                    b.HasKey("id")
                        .HasName("PK_moveSubType_id")
                        .IsClustered(false);

                    b.HasIndex(new[] { "character_code", "code" }, "IX_moveSubType")
                        .IsUnique()
                        .IsClustered();

                    b.HasIndex(new[] { "character_code", "number" }, "IX_moveSubType_character_code_number")
                        .IsUnique();

                    b.HasIndex(new[] { "code" }, "IX_moveSubType_code")
                        .IsUnique();

                    b.ToTable("moveSubType");
                });

            modelBuilder.Entity("TekkenApp.Models.moveSubType_name", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<int>("moveSubType_code")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("id");

                    b.HasIndex("language_code");

                    b.HasIndex(new[] { "moveSubType_code", "language_code" }, "IX_moveSubType_name")
                        .IsUnique();

                    b.ToTable("moveSubType_name");
                });

            modelBuilder.Entity("TekkenApp.Models.moveText", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("character_code")
                        .HasColumnType("tinyint");

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte>("number")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "character_code", "number" }, "IX_moveText_character_code_number")
                        .IsUnique();

                    b.HasIndex(new[] { "code" }, "IX_moveText_code")
                        .IsUnique();

                    b.ToTable("moveText");
                });

            modelBuilder.Entity("TekkenApp.Models.moveText_name", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<int>("moveText_code")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("id");

                    b.HasIndex("language_code");

                    b.HasIndex(new[] { "moveText_code", "language_code" }, "IX_moveText_name")
                        .IsUnique();

                    b.ToTable("moveText_name");
                });

            modelBuilder.Entity("TekkenApp.Models.moveType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte>("number")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "code", "number" }, "IX_moveType_1")
                        .IsUnique();

                    b.HasIndex(new[] { "code" }, "IX_moveType_code_unique")
                        .IsUnique();

                    b.ToTable("moveType");
                });

            modelBuilder.Entity("TekkenApp.Models.moveType_name", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<int>("moveType_code")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("id");

                    b.HasIndex("moveType_code");

                    b.HasIndex(new[] { "language_code", "moveType_code" }, "IX_moveType_name")
                        .IsUnique();

                    b.ToTable("moveType_name");
                });

            modelBuilder.Entity("TekkenApp.Models.move_command_name", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Move_Command_code")
                        .HasColumnType("int");

                    b.Property<bool>("_checked")
                        .HasColumnType("bit")
                        .HasColumnName("checked");

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Move_Command_code");

                    b.HasIndex(new[] { "language_code", "Move_Command_code" }, "IX_move_command")
                        .IsUnique();

                    b.ToTable("move_command_name");
                });

            modelBuilder.Entity("TekkenApp.Models.move_data", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Move_Code")
                        .HasColumnType("int");

                    b.Property<string>("afterBreak")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("breakThrow")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<short>("counterFrame")
                        .HasColumnType("smallint");

                    b.Property<string>("counterFrame_Display")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("counterType_code")
                        .HasColumnType("int");

                    b.Property<short>("damage")
                        .HasColumnType("smallint");

                    b.Property<short>("guardFrame")
                        .HasColumnType("smallint");

                    b.Property<string>("guardFrame_Display")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("guardType_code")
                        .HasColumnType("int");

                    b.Property<byte>("hitCount")
                        .HasColumnType("tinyint");

                    b.Property<short>("hitFrame")
                        .HasColumnType("smallint");

                    b.Property<string>("hitFrame_Display")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("hitLevel")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("hitType_code")
                        .HasColumnType("int");

                    b.Property<bool>("homing")
                        .HasColumnType("bit");

                    b.Property<int?>("moveSubType_code")
                        .HasColumnType("int");

                    b.Property<int?>("moveType_code")
                        .HasColumnType("int");

                    b.Property<string>("note")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("powerCrush")
                        .HasColumnType("bit");

                    b.Property<short>("startFrame")
                        .HasColumnType("smallint");

                    b.Property<string>("startFrame_Display")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("startType_code")
                        .HasColumnType("int");

                    b.Property<bool>("tailSpin")
                        .HasColumnType("bit");

                    b.Property<bool>("technicallyCrouching")
                        .HasColumnType("bit");

                    b.Property<bool>("technicallyJumping")
                        .HasColumnType("bit");

                    b.Property<decimal?>("version")
                        .HasColumnType("decimal(4,2)");

                    b.Property<bool>("wallSplat")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("counterType_code");

                    b.HasIndex("guardType_code");

                    b.HasIndex("hitType_code");

                    b.HasIndex("moveSubType_code");

                    b.HasIndex("moveType_code");

                    b.HasIndex("startType_code");

                    b.HasIndex(new[] { "Move_Code" }, "IX_move_data")
                        .IsUnique();

                    b.ToTable("move_data");
                });

            modelBuilder.Entity("TekkenApp.Models.move_name", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<int>("move_code")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("id");

                    b.HasIndex("language_code");

                    b.HasIndex(new[] { "move_code", "language_code" }, "IX_move_name")
                        .IsUnique();

                    b.ToTable("move_name");
                });

            modelBuilder.Entity("TekkenApp.Models.tekkenVersion", b =>
                {
                    b.Property<decimal>("version")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int?>("ID")
                        .HasColumnType("int");

                    b.Property<byte>("season")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("updateDate")
                        .HasColumnType("date");

                    b.HasKey("version")
                        .HasName("PK_version");

                    b.ToTable("tekkenVersion");
                });

            modelBuilder.Entity("TekkenApp.Models.Move", b =>
                {
                    b.HasOne("TekkenApp.Models.character", "character_codeNavigation")
                        .WithMany("Move")
                        .HasForeignKey("character_code")
                        .HasConstraintName("FK_Move_character")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.tekkenVersion", "versionNavigation")
                        .WithMany("Move")
                        .HasForeignKey("version")
                        .HasConstraintName("FK_Move_version");

                    b.Navigation("character_codeNavigation");

                    b.Navigation("versionNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.Move_Data_Name", b =>
                {
                    b.HasOne("TekkenApp.Models.move_data", "Move_Data_CodeNavigation")
                        .WithMany("Move_Data_Name")
                        .HasForeignKey("Move_Data_Code")
                        .HasConstraintName("FK_Move_Data_Name_move_data")
                        .HasPrincipalKey("Move_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Move_Data_CodeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.Move_command", b =>
                {
                    b.HasOne("TekkenApp.Models.Move", "move_codeNavigation")
                        .WithOne("Move_command")
                        .HasForeignKey("TekkenApp.Models.Move_command", "move_code")
                        .HasConstraintName("FK_Move_command_Move1")
                        .HasPrincipalKey("TekkenApp.Models.Move", "code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("move_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.State", b =>
                {
                    b.HasOne("TekkenApp.Models.StateGroup", "StateGroup_codeNavigation")
                        .WithMany("State")
                        .HasForeignKey("StateGroup_code")
                        .HasConstraintName("FK_State_StateGroup")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.Navigation("StateGroup_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.StateGroup_name", b =>
                {
                    b.HasOne("TekkenApp.Models.StateGroup", "StateGroup_codeNavigation")
                        .WithMany("StateGroup_name")
                        .HasForeignKey("StateGroup_code")
                        .HasConstraintName("FK_StateGroup_name_StateGroup")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.language", "language_codeNavigation")
                        .WithMany("StateGroup_name")
                        .HasForeignKey("language_code")
                        .HasConstraintName("FK_StateGroup_name_language")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.Navigation("language_codeNavigation");

                    b.Navigation("StateGroup_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.State_name", b =>
                {
                    b.HasOne("TekkenApp.Models.language", "language_codeNavigation")
                        .WithMany("State_name")
                        .HasForeignKey("language_code")
                        .HasConstraintName("FK_State_name_language")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.State", "state_codeNavigation")
                        .WithMany("State_name")
                        .HasForeignKey("state_code")
                        .HasConstraintName("FK_State_name_State")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.Navigation("language_codeNavigation");

                    b.Navigation("state_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.character_name", b =>
                {
                    b.HasOne("TekkenApp.Models.language", "language_codeNavigation")
                        .WithMany("character_name")
                        .HasForeignKey("language_code")
                        .HasConstraintName("FK_character_name_language")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.Navigation("language_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.command_name", b =>
                {
                    b.HasOne("TekkenApp.Models.language", "language_codeNavigation")
                        .WithMany("command_name")
                        .HasForeignKey("language_code")
                        .HasConstraintName("FK_command_name_language")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.Navigation("language_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.hitType_name", b =>
                {
                    b.HasOne("TekkenApp.Models.hitType", "hitType_codeNavigation")
                        .WithMany("hitType_name")
                        .HasForeignKey("hitType_code")
                        .HasConstraintName("FK_hitType_name_hitType")
                        .HasPrincipalKey("code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hitType_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.moveSubType", b =>
                {
                    b.HasOne("TekkenApp.Models.character", "character_codeNavigation")
                        .WithMany("moveSubType")
                        .HasForeignKey("character_code")
                        .HasConstraintName("FK_moveSubType_moveSubType")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.Navigation("character_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.moveSubType_name", b =>
                {
                    b.HasOne("TekkenApp.Models.language", "language_codeNavigation")
                        .WithMany("moveSubType_name")
                        .HasForeignKey("language_code")
                        .HasConstraintName("FK_moveSubType_name_language")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.moveSubType", "moveSubType_codeNavigation")
                        .WithMany("moveSubType_name")
                        .HasForeignKey("moveSubType_code")
                        .HasConstraintName("FK_moveSubType_name_moveSubType_name")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.Navigation("language_codeNavigation");

                    b.Navigation("moveSubType_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.moveText", b =>
                {
                    b.HasOne("TekkenApp.Models.character", "character_codeNavigation")
                        .WithMany("moveText")
                        .HasForeignKey("character_code")
                        .HasConstraintName("FK_moveText_character")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.Navigation("character_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.moveText_name", b =>
                {
                    b.HasOne("TekkenApp.Models.language", "language_codeNavigation")
                        .WithMany("moveText_name")
                        .HasForeignKey("language_code")
                        .HasConstraintName("FK_moveText_name_language1")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.moveText", "moveText_codeNavigation")
                        .WithMany("moveText_name")
                        .HasForeignKey("moveText_code")
                        .HasConstraintName("FK_moveText_name_moveText")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.Navigation("language_codeNavigation");

                    b.Navigation("moveText_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.moveType_name", b =>
                {
                    b.HasOne("TekkenApp.Models.language", "language_codeNavigation")
                        .WithMany("moveType_name")
                        .HasForeignKey("language_code")
                        .HasConstraintName("FK_moveType_name_language")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.moveType", "moveType_codeNavigation")
                        .WithMany("moveType_name")
                        .HasForeignKey("moveType_code")
                        .HasConstraintName("FK_moveType_name_moveType")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.Navigation("language_codeNavigation");

                    b.Navigation("moveType_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.move_command_name", b =>
                {
                    b.HasOne("TekkenApp.Models.Move", "Move_Command_codeNavigation")
                        .WithMany("move_command_name")
                        .HasForeignKey("Move_Command_code")
                        .HasConstraintName("FK_move_command_Move")
                        .HasPrincipalKey("code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.language", "language_codeNavigation")
                        .WithMany("move_command_name")
                        .HasForeignKey("language_code")
                        .HasConstraintName("FK_move_command_language")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.Navigation("language_codeNavigation");

                    b.Navigation("Move_Command_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.move_data", b =>
                {
                    b.HasOne("TekkenApp.Models.Move", "Move_CodeNavigation")
                        .WithOne("move_data")
                        .HasForeignKey("TekkenApp.Models.move_data", "Move_Code")
                        .HasConstraintName("FK_move_data_Move")
                        .HasPrincipalKey("TekkenApp.Models.Move", "code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.hitType", "counterType_codeNavigation")
                        .WithMany("move_datacounterType_codeNavigation")
                        .HasForeignKey("counterType_code")
                        .HasConstraintName("FK_move_data_hitType3")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.hitType", "guardType_codeNavigation")
                        .WithMany("move_dataguardType_codeNavigation")
                        .HasForeignKey("guardType_code")
                        .HasConstraintName("FK_move_data_hitType")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.hitType", "hitType_codeNavigation")
                        .WithMany("move_datahitType_codeNavigation")
                        .HasForeignKey("hitType_code")
                        .HasConstraintName("FK_move_data_hitType2")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.moveSubType", "moveSubType_codeNavigation")
                        .WithMany("move_data")
                        .HasForeignKey("moveSubType_code")
                        .HasConstraintName("FK_move_data_moveSubType")
                        .HasPrincipalKey("code");

                    b.HasOne("TekkenApp.Models.moveType", "moveType_codeNavigation")
                        .WithMany("move_data")
                        .HasForeignKey("moveType_code")
                        .HasConstraintName("FK_move_data_moveType")
                        .HasPrincipalKey("code");

                    b.HasOne("TekkenApp.Models.hitType", "startType_codeNavigation")
                        .WithMany("move_datastartType_codeNavigation")
                        .HasForeignKey("startType_code")
                        .HasConstraintName("FK_move_data_hitType1")
                        .HasPrincipalKey("code");

                    b.Navigation("counterType_codeNavigation");

                    b.Navigation("guardType_codeNavigation");

                    b.Navigation("hitType_codeNavigation");

                    b.Navigation("Move_CodeNavigation");

                    b.Navigation("moveSubType_codeNavigation");

                    b.Navigation("moveType_codeNavigation");

                    b.Navigation("startType_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.move_name", b =>
                {
                    b.HasOne("TekkenApp.Models.language", "language_codeNavigation")
                        .WithMany("move_name")
                        .HasForeignKey("language_code")
                        .HasConstraintName("FK_move_name_language")
                        .HasPrincipalKey("code")
                        .IsRequired();

                    b.HasOne("TekkenApp.Models.Move", "move_codeNavigation")
                        .WithMany("move_name")
                        .HasForeignKey("move_code")
                        .HasConstraintName("FK_move_name_Move")
                        .HasPrincipalKey("code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("language_codeNavigation");

                    b.Navigation("move_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.Move", b =>
                {
                    b.Navigation("Move_command");

                    b.Navigation("move_command_name");

                    b.Navigation("move_data");

                    b.Navigation("move_name");
                });

            modelBuilder.Entity("TekkenApp.Models.State", b =>
                {
                    b.Navigation("State_name");
                });

            modelBuilder.Entity("TekkenApp.Models.StateGroup", b =>
                {
                    b.Navigation("State");

                    b.Navigation("StateGroup_name");
                });

            modelBuilder.Entity("TekkenApp.Models.character", b =>
                {
                    b.Navigation("Move");

                    b.Navigation("moveSubType");

                    b.Navigation("moveText");
                });

            modelBuilder.Entity("TekkenApp.Models.hitType", b =>
                {
                    b.Navigation("hitType_name");

                    b.Navigation("move_datacounterType_codeNavigation");

                    b.Navigation("move_dataguardType_codeNavigation");

                    b.Navigation("move_datahitType_codeNavigation");

                    b.Navigation("move_datastartType_codeNavigation");
                });

            modelBuilder.Entity("TekkenApp.Models.language", b =>
                {
                    b.Navigation("character_name");

                    b.Navigation("command_name");

                    b.Navigation("move_command_name");

                    b.Navigation("move_name");

                    b.Navigation("moveSubType_name");

                    b.Navigation("moveText_name");

                    b.Navigation("moveType_name");

                    b.Navigation("State_name");

                    b.Navigation("StateGroup_name");
                });

            modelBuilder.Entity("TekkenApp.Models.moveSubType", b =>
                {
                    b.Navigation("move_data");

                    b.Navigation("moveSubType_name");
                });

            modelBuilder.Entity("TekkenApp.Models.moveText", b =>
                {
                    b.Navigation("moveText_name");
                });

            modelBuilder.Entity("TekkenApp.Models.moveType", b =>
                {
                    b.Navigation("move_data");

                    b.Navigation("moveType_name");
                });

            modelBuilder.Entity("TekkenApp.Models.move_data", b =>
                {
                    b.Navigation("Move_Data_Name");
                });

            modelBuilder.Entity("TekkenApp.Models.tekkenVersion", b =>
                {
                    b.Navigation("Move");
                });
#pragma warning restore 612, 618
        }
    }
}
