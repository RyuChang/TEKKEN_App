// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Models.Models
{
    public partial class TEKKENContext : DbContext
    {
        public TEKKENContext()
        {
        }

        public TEKKENContext(DbContextOptions<TEKKENContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Character> Character { get; set; }
        public virtual DbSet<CharacterName> CharacterName { get; set; }
        public virtual DbSet<Command> Command { get; set; }
        public virtual DbSet<CommandName> CommandName { get; set; }
        public virtual DbSet<HitType> HitType { get; set; }
        public virtual DbSet<HitTypeName> HitTypeName { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<Move> Move { get; set; }
        public virtual DbSet<MoveCommand> MoveCommand { get; set; }
        public virtual DbSet<MoveCommandName> MoveCommandName { get; set; }
        public virtual DbSet<MoveData> MoveData { get; set; }
        public virtual DbSet<MoveDataName> MoveDataName { get; set; }
        public virtual DbSet<MoveName> MoveName { get; set; }
        public virtual DbSet<MoveSubType> MoveSubType { get; set; }
        public virtual DbSet<MoveSubTypeName> MoveSubTypeName { get; set; }
        public virtual DbSet<MoveText> MoveText { get; set; }
        public virtual DbSet<MoveTextName> MoveTextName { get; set; }
        public virtual DbSet<MoveType> MoveType { get; set; }
        public virtual DbSet<MoveTypeName> MoveTypeName { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<StateGroup> StateGroup { get; set; }
        public virtual DbSet<StateGroupName> StateGroupName { get; set; }
        public virtual DbSet<StateName> StateName { get; set; }
        public virtual DbSet<TekkenVersion> TekkenVersion { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=RC-PC\\GMGG;Initial Catalog=TEKKEN;Persist Security Info=True;User ID=sa;Password=dufma12#");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Korean_100_CI_AS_SC_UTF8");

            modelBuilder.Entity<Character>(entity =>
            {
                entity.Property(e => e.CodeName)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<CharacterName>(entity =>
            {
                entity.Property(e => e.FullName).IsUnicode(false);

                entity.Property(e => e.LanguageCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.LanguageCodeNavigation)
                    .WithMany(p => p.CharacterName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.LanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_character_name_language");
            });

            modelBuilder.Entity<Command>(entity =>
            {
                entity.Property(e => e.Code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Command1).IsUnicode(false);

                entity.Property(e => e.Key).IsUnicode(false);
            });

            modelBuilder.Entity<CommandName>(entity =>
            {
                entity.Property(e => e.CommandCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LanguageCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.LanguageCodeNavigation)
                    .WithMany(p => p.CommandName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.LanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_command_name_language");
            });

            modelBuilder.Entity<HitType>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<HitTypeName>(entity =>
            {
                entity.Property(e => e.LanguageCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.HitTypeCodeNavigation)
                    .WithMany(p => p.HitTypeName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.HitTypeCode)
                    .HasConstraintName("FK_hitType_name_hitType");
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.Property(e => e.Code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<Move>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.HasOne(d => d.CharacterCodeNavigation)
                    .WithMany(p => p.Move)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.CharacterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Move_character");

                entity.HasOne(d => d.VersionNavigation)
                    .WithMany(p => p.Move)
                    .HasForeignKey(d => d.Version)
                    .HasConstraintName("FK_Move_version");
            });

            modelBuilder.Entity<MoveCommand>(entity =>
            {
                entity.Property(e => e.Command).IsUnicode(false);

                entity.HasOne(d => d.MoveCodeNavigation)
                    .WithOne(p => p.MoveCommand)
                    .HasPrincipalKey<Move>(p => p.Code)
                    .HasForeignKey<MoveCommand>(d => d.MoveCode)
                    .HasConstraintName("FK_Move_command_Move1");
            });

            modelBuilder.Entity<MoveCommandName>(entity =>
            {
                entity.Property(e => e.LanguageCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.LanguageCodeNavigation)
                    .WithMany(p => p.MoveCommandName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.LanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_move_command_language");

                entity.HasOne(d => d.MoveCommandCodeNavigation)
                    .WithMany(p => p.MoveCommandName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.MoveCommandCode)
                    .HasConstraintName("FK_move_command_Move");
            });

            modelBuilder.Entity<MoveData>(entity =>
            {
                entity.Property(e => e.AfterBreak).IsUnicode(false);

                entity.Property(e => e.BreakThrow).IsUnicode(false);

                entity.Property(e => e.CounterFrameDisplay).IsUnicode(false);

                entity.Property(e => e.GuardFrameDisplay).IsUnicode(false);

                entity.Property(e => e.HitFrameDisplay).IsUnicode(false);

                entity.Property(e => e.HitLevel).IsUnicode(false);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.StartFrameDisplay).IsUnicode(false);

                entity.HasOne(d => d.CounterTypeCodeNavigation)
                    .WithMany(p => p.MoveDataCounterTypeCodeNavigation)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.CounterTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_move_data_hitType3");

                entity.HasOne(d => d.GuardTypeCodeNavigation)
                    .WithMany(p => p.MoveDataGuardTypeCodeNavigation)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.GuardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_move_data_hitType");

                entity.HasOne(d => d.HitTypeCodeNavigation)
                    .WithMany(p => p.MoveDataHitTypeCodeNavigation)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.HitTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_move_data_hitType2");

                entity.HasOne(d => d.MoveCodeNavigation)
                    .WithOne(p => p.MoveData)
                    .HasPrincipalKey<Move>(p => p.Code)
                    .HasForeignKey<MoveData>(d => d.MoveCode)
                    .HasConstraintName("FK_move_data_Move");

                entity.HasOne(d => d.MoveSubTypeCodeNavigation)
                    .WithMany(p => p.MoveData)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.MoveSubTypeCode)
                    .HasConstraintName("FK_move_data_moveSubType");

                entity.HasOne(d => d.MoveTypeCodeNavigation)
                    .WithMany(p => p.MoveData)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.MoveTypeCode)
                    .HasConstraintName("FK_move_data_moveType");

                entity.HasOne(d => d.StartTypeCodeNavigation)
                    .WithMany(p => p.MoveDataStartTypeCodeNavigation)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.StartTypeCode)
                    .HasConstraintName("FK_move_data_hitType1");
            });

            modelBuilder.Entity<MoveDataName>(entity =>
            {
                entity.Property(e => e.LanguageCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.MoveDataCodeNavigation)
                    .WithMany(p => p.MoveDataName)
                    .HasPrincipalKey(p => p.MoveCode)
                    .HasForeignKey(d => d.MoveDataCode)
                    .HasConstraintName("FK_Move_Data_Name_move_data");
            });

            modelBuilder.Entity<MoveName>(entity =>
            {
                entity.Property(e => e.LanguageCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.LanguageCodeNavigation)
                    .WithMany(p => p.MoveName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.LanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_move_name_language");

                entity.HasOne(d => d.MoveCodeNavigation)
                    .WithMany(p => p.MoveName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.MoveCode)
                    .HasConstraintName("FK_move_name_Move");
            });

            modelBuilder.Entity<MoveSubType>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_moveSubType_id")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.CharacterCode, e.Code }, "IX_moveSubType")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.HasOne(d => d.CharacterCodeNavigation)
                    .WithMany(p => p.MoveSubType)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.CharacterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveSubType_moveSubType");
            });

            modelBuilder.Entity<MoveSubTypeName>(entity =>
            {
                entity.Property(e => e.LanguageCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.LanguageCodeNavigation)
                    .WithMany(p => p.MoveSubTypeName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.LanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveSubType_name_language");

                entity.HasOne(d => d.MoveSubTypeCodeNavigation)
                    .WithMany(p => p.MoveSubTypeName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.MoveSubTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveSubType_name_moveSubType_name");
            });

            modelBuilder.Entity<MoveText>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.HasOne(d => d.CharacterCodeNavigation)
                    .WithMany(p => p.MoveText)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.CharacterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveText_character");
            });

            modelBuilder.Entity<MoveTextName>(entity =>
            {
                entity.Property(e => e.LanguageCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.LanguageCodeNavigation)
                    .WithMany(p => p.MoveTextName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.LanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveText_name_language1");

                entity.HasOne(d => d.MoveTextCodeNavigation)
                    .WithMany(p => p.MoveTextName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.MoveTextCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveText_name_moveText");
            });

            modelBuilder.Entity<MoveType>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<MoveTypeName>(entity =>
            {
                entity.Property(e => e.LanguageCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.LanguageCodeNavigation)
                    .WithMany(p => p.MoveTypeName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.LanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveType_name_language");

                entity.HasOne(d => d.MoveTypeCodeNavigation)
                    .WithMany(p => p.MoveTypeName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.MoveTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_moveType_name_moveType");
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.HasOne(d => d.StateGroupCodeNavigation)
                    .WithMany(p => p.State)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.StateGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_State_StateGroup");
            });

            modelBuilder.Entity<StateGroup>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<StateGroupName>(entity =>
            {
                entity.Property(e => e.LanguageCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.LanguageCodeNavigation)
                    .WithMany(p => p.StateGroupName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.LanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StateGroup_name_language");

                entity.HasOne(d => d.StateGroupCodeNavigation)
                    .WithMany(p => p.StateGroupName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.StateGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StateGroup_name_StateGroup");
            });

            modelBuilder.Entity<StateName>(entity =>
            {
                entity.Property(e => e.LanguageCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.LanguageCodeNavigation)
                    .WithMany(p => p.StateName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.LanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_State_name_language");

                entity.HasOne(d => d.StateCodeNavigation)
                    .WithMany(p => p.StateName)
                    .HasPrincipalKey(p => p.Code)
                    .HasForeignKey(d => d.StateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_State_name_State");
            });

            modelBuilder.Entity<TekkenVersion>(entity =>
            {
                entity.HasKey(e => e.Version)
                    .HasName("PK_version");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}